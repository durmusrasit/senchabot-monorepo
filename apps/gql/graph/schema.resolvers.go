package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"strconv"

	"github.com/senchabot-opensource/monorepo/apps/gql/graph/model"
)

// TwitchChannels is the resolver for the twitchChannels field.
func (r *queryResolver) TwitchChannels(ctx context.Context) ([]*model.TwitchChannel, error) {
	var channels []*model.TwitchChannel
	chs, err := r.Service.GetTwitchChannels()
	if err != nil {
		return nil, err
	}

	for _, ch := range chs {
		channels = append(channels, &model.TwitchChannel{
			ID:          strconv.Itoa(ch.ID),
			ChannelID:   ch.ChannelId,
			ChannelName: ch.ChannelName,
			UserID:      ch.UserId,
		})
	}

	return channels, nil
}

// BotActionActivies is the resolver for the botActionActivies field.
func (r *queryResolver) BotActionActivies(ctx context.Context) ([]*model.BotActionActivity, error) {
	var botActivities []*model.BotActionActivity
	data, err := r.Service.GetBotActionActivities()
	if err != nil {
		return nil, err
	}

	for _, d := range data {
		botActivities = append(botActivities, &model.BotActionActivity{
			ID:              strconv.Itoa(d.ID),
			BotPlatformType: d.BotPlatformType,
			BotActivity:     d.BotActivity,
		})
	}

	return botActivities, nil
}

// BotCommands is the resolver for the botCommands field.
func (r *queryResolver) BotCommands(ctx context.Context) ([]*model.BotCommand, error) {
	var botCommands []*model.BotCommand
	data, err := r.Service.GetBotCommands()
	if err != nil {
		return nil, err
	}

	for _, d := range data {
		fmt.Println("commandName", d.CommandName)
		botCommands = append(botCommands, &model.BotCommand{
			ID:          strconv.Itoa(d.ID),
			CommandName: d.CommandName,
			CreatedBy:   d.CreatedBy,
			CreatedAt:   d.CreatedAt,
		})
	}

	return botCommands, nil
}

// BotCommandAliases is the resolver for the botCommandAliases field.
func (r *queryResolver) BotCommandAliases(ctx context.Context) ([]*model.BotCommandAlias, error) {
	var botCommandAliases []*model.BotCommandAlias
	data, err := r.Service.GetBotCommandAliases()
	if err != nil {
		return nil, err
	}

	for _, d := range data {
		botCommandAliases = append(botCommandAliases, &model.BotCommandAlias{
			ID:           strconv.Itoa(d.ID),
			CommandAlias: d.CommandAlias,
			CommandName:  d.CommandName,
			CreatedBy:    &d.CreatedBy,
		})
	}

	return botCommandAliases, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
